name: Wheels

on:
  workflow_dispatch:

env:
  GLFW_VERSION: "3.4"
  CUDAPIXELCANVAS_VERSION: "2.7"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  
jobs:
  
  build-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
  
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CUDAPIXELCANVAS_VERSION }}
          release_name: ${{ env.CUDAPIXELCANVAS_VERSION }}
          draft: false
          prerelease: false

  build-windows:
    runs-on: windows-latest
    needs: build-tag
    strategy:
      matrix:
        python-version: ['3.12']
        torch-version: ['2.8']
        cuda-version: ['12.9']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
            
    - name: List Visual Studio installations
      run: |
        & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -products * -legacy -format text

    - name: Install Wheel
      run:
        pip3 install setuptools wheel
        
    - name: Install Torch + Cuda ${{ matrix.cuda-version }}
      run: |
        $CUDA_VERSION="${{ matrix.cuda-version }}"
        $CUDA_VERSION_NO_DOT=$CUDA_VERSION -replace '\.', ''
        pip3 install torch --index-url https://download.pytorch.org/whl/cu$CUDA_VERSION_NO_DOT
        python3 --version
 
    - name: Download and Extract CUDA Toolkit ${{ matrix.cuda-version }}
      run: |
        if ("${{ matrix.cuda-version }}" -eq "12.9") {
          choco install cuda --version=12.9.0
        } elseif ("${{ matrix.cuda-version }}" -eq "12.4") {
          choco install cuda --version=12.4.0.551
        } else {
          choco install cuda --version=11.8.0.52206
        }
        
    - name: Install dependencies and build GLFW for Windows
      run: |
        if ("${{env.GLFW_VERSION}}" -eq "") {
          throw "GLFW_VERSION is not set"
        }
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install unzip
        choco install curl
        curl -LO https://github.com/glfw/glfw/releases/download/${{env.GLFW_VERSION}}/glfw-${{env.GLFW_VERSION}}.zip
        unzip glfw-${{env.GLFW_VERSION}}.zip
        mkdir build
        cd build
        cmake -G "Visual Studio 17 2022" -A x64 ../glfw-${{env.GLFW_VERSION}} -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF
        cmake --build . --config Release
        cp src/Release/glfw3.dll ../glfw-${{env.GLFW_VERSION}}/glfw3.dll
        cp src/Release/glfw3dll.lib ../glfw-${{env.GLFW_VERSION}}/glfw3dll.lib
        Get-ChildItem -Path "src/Release/"
        cd..

    - name: List contents of a directory
      run: |
        Get-ChildItem -Path "glfw-${{env.GLFW_VERSION}}"

    - name: Find CUDA Toolkit path
      run: |
        $env:CUDART_PATH= "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda-version }}\bin"
        $env:CUDART_HOME= "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda-version }}\bin"


    - name: Generate Wheels
      run: |
        python3 setup.py bdist_wheel --plat-name win_amd64
      env:
        INCLUDE_PATH: glfw-${{ env.GLFW_VERSION }}/include
        LIB_PATH: glfw-${{ env.GLFW_VERSION }}

    - name: Generate latest Wheels
      if: matrix.cuda-version != '11.8'
      run: |
        python3 setup.py bdist_wheel --plat-name win_amd64
      env:
        INCLUDE_PATH: glfw-${{ env.GLFW_VERSION }}/include
        LIB_PATH: glfw-${{ env.GLFW_VERSION }}
        BASE_VERSION: ${{ matrix.torch-version }}
        
    - name: Upload assets
      run: |
        for filename in dist/*; do
          echo "Uploading $filename"
          gh release upload ${{ env.CUDAPIXELCANVAS_VERSION }} "$filename" --clobber --repo ${{ github.repository }}
        done
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    


